{"version":3,"sources":["GlobalStyle.js","App.js","reportWebVitals.js","index.js"],"names":["DocumentStyle","createGlobalStyle","text","background","gradient","ThemeStyle","darkSber","GlobalStyle","assistant","App","props","state","commandString","buttons","emojis","classN","getState","getRecoveryState","recoveryState","createAssistant","on","console","log","setState","concat","onDataFn","command","JSON","stringify","smart_app_data","stop_app","close","navigation","window","Device","id","type","values","SwitchTransition","CSSTransition","addEndListener","node","done","addEventListener","classNames","this","className","Card","CardBody","CardContent","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAQMA,EAAgBC,4BAAH,oKAGFC,OACWC,aACAC,YAGtBC,EAAaJ,4BAAkBK,KACxBC,EAAc,kBACvB,qCACI,cAACP,EAAD,IACA,cAACK,EAAD,Q,gDCEJG,EAAY,GA0KDC,E,kDAvKb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,cAAe,OACfC,QAAS,GACTC,OAAQ,GACRZ,KAAM,sJAENa,OAAQ,QARO,E,qDAanB,WAAqB,IAKCC,EAAUC,EALZ,OACZN,EAAQ,GACRO,EAAgB,GAGFF,EAclB,kBAAML,GAdsBM,EAe5B,kBAAMC,IAFRV,EAHSW,YAAgB,CAAEH,WAAUC,sBAQ3BG,GAAG,SAAS,WACpBC,QAAQC,IAAI,SAEZ,EAAKC,SAAS,CAAET,OAAQ,8IAOxB,EAAKS,SAAS,CACZX,cAAe,EAAKD,MAAMC,cAAcY,OAAO,QAAS,cAI5D,IAAMC,EAAW,SAACC,GAChBL,QAAQC,IAAI,YAAcK,KAAKC,UAAUF,IACzC,EAAKH,SAAS,CACZX,cAAe,EAAKD,MAAMC,cAAcY,OACtC,QACAG,KAAKC,UAAUF,MAIfA,EAAQG,gBAAkBH,EAAQG,eAAeC,WACnDT,QAAQC,IAAI,iBACZd,EAAUuB,SAGRL,EAAQG,gBAAkBH,EAAQG,eAAe3B,MACnD,EAAKqB,SAAS,CAAErB,KAAMwB,EAAQG,eAAe3B,OAG3CwB,EAAQG,gBAAkBH,EAAQG,eAAef,QACnD,EAAKS,SAAS,CAAET,OAAQY,EAAQG,eAAef,SAG7CY,EAAQG,gBAAkBH,EAAQG,eAAehB,SACnD,EAAKU,SAAS,CAAEV,QAASa,EAAQG,eAAehB,UAI9Ca,EAAQM,YACFN,EAAQM,WAAWN,SAY/BlB,EAAUY,GAAG,OAAQK,GACrBQ,OAAOR,SAAWA,I,oBAGpB,WAqBE,OACE,eAACS,EAAA,oBAAD,WACE,cAAC,EAAD,IACA,8BACE,wBAAQC,GAAG,MAAX,SACE,+BAAeC,KAAK,SAASC,OAAO,iDAOxC,8BACE,wBAAQF,GAAG,QAAX,SACE,+BAAeC,KAAK,SAASC,OAAO,iDAOxC,8BACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAEEC,eAAgB,SAACC,EAAMC,GAAP,OACdD,EAAKE,iBAAiB,gBAAiBD,GAAM,IAE/CE,WAAYC,KAAKlC,MAAMI,OALzB,SAOE,qBAAK+B,UAAU,SAAf,SACE,4BAAID,KAAKlC,MAAMG,YAPZ+B,KAAKlC,MAAMG,YAatB,qBAAKgC,UAAU,gBAAf,SACE,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACKJ,KAAKlC,MAAMT,oB,GA9JhBgD,IAAMC,WCZTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7695afe7.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport { darkSber } from '@sberdevices/plasma-tokens'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\nimport {\n    text, // Цвет текста\n    background, // Цвет подложки\n    gradient, // Градиент\n} from '@sberdevices/plasma-tokens';\n\nconst DocumentStyle = createGlobalStyle`\n    html:root {\n        min-height: 100vh;\n        color: ${text};\n        background-color: ${background};\n        background-image: ${gradient};\n    }\n`;\nconst ThemeStyle = createGlobalStyle(darkSber);\nexport const GlobalStyle = () => (\n    <>\n        <DocumentStyle />\n        <ThemeStyle />\n    </>\n);","// jshint esversion:6\n\nimport React from \"react\";\nimport {\n  createAssistant,\n  createSmartappDebugger\n} from \"@sberdevices/assistant-client\";\nimport \"./App.css\";\nimport { Button } from \"@sberdevices/plasma-ui/components/Button/Button\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { DeviceThemeProvider } from \"@sberdevices/plasma-ui/components/Device\";\nimport { SwitchTransition, CSSTransition } from \"react-transition-group\";\nimport {\n    Card,\n    CardBody,\n    CardContent\n } from '@sberdevices/plasma-ui';\n\n// https://developers.sber.ru/studio/settings/emulator\nconst SBER_TOKEN =\n  \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhOGQ1MDgwMzU1ODQ3YzhkNmZjNGY3ZDVmOWMxMzRkOGYwNDAwNjEyZmJiZTQ3ZjEyNzU1ODAwODRjODhlZmM4NDY4ZDU4YzQ3OTU3ZmEzYyIsImF1ZCI6IlZQUyIsImV4cCI6MTYzMDMzMjYwNSwiaWF0IjoxNjMwMjQ2MTk1LCJpc3MiOiJLRVlNQVNURVIiLCJ0eXBlIjoiQmVhcmVyIiwianRpIjoiZjQ0ZDU0MjItZGE2MC00ZDY0LTg3ZjYtYWMyZjQ5MDRjMWVlIiwic2lkIjoiOTA5YmRmOWItNjA2NS00MDg1LTg2MmUtYmQ5YmIxN2MxYjg5In0.iKtKJgb1gwE9h6M_W42N2jCIVrA-kIS2udngV_oXCgKyT93EGKeO9thNv3kKkMb86_y3ImfJa955UFHVMPOhQTNTmCC2dhD4roF1ZQE17W97-gV6Yo8if5nz_8D_f5gnrznDPVIutUOb6_7vk6o7DPCWCvVf6XOHO3dhhv6--RzuS2usyY4O22YOVWVp03mSn2kX1X_K5S0oBiWzsFGBQshikG7l7O-EMVLaeM0HpUDaBJKcFlgJUzu5x20WSPhdGhgsZsfzN095_5FPKtA0kKHIGC61ebUlwiXatxzPxDSWnsn_906KTU52tIoRPct9DEL-nDePpCau0ji92Phs4UUjtotTmiDIBkqrpaPW_kpQdjMs3p-X7oxQJCF0frs84dt7NONurOrz6pgZYxe1qoUL0bzPGIuBzJmmPvkiVZgJXjRdujoLlQmYSgjzi2LQXdP3eiAobJC1lPcuEDoZkUUjsBcmxXcXC7q4xt-xHTTG5soec54F6HiKMgeZtvGsbKklZ4MYCJF-sy2kfaCnaz512lLh0pdsuuXUb6i538kefUhlsowBm58TZE2pFjUalaz4KR2Q6-6tnIzGnKxARNnWCTajEfms6WcV4HKioejjad6lLCpJjWFqaqFX7dYMPyYwHK6gPutoYRiQCzaTt10WiAoFySmbepwzdlnAL0Y\";\n\nvar assistant = {};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      commandString: \"HEY!\",\n      buttons: [],\n      emojis: '',\n      text: \"Угадай мультфильм по эмодзи\",\n      //text: \"Угадай фильм по эмодзи\",\n      classN: \"fade\"\n    };\n  }\n\n\n  componentDidMount() {\n    const state = {};\n    const recoveryState = {};\n\n\n    const initialize = (getState, getRecoveryState) => {\n      if (process.env.NODE_ENV === \"development\") {\n        return createSmartappDebugger({\n          token: SBER_TOKEN,\n          initPhrase: \"Запусти Угадай мультфильм по эмодзи\",\n          //initPhrase: \"Запусти Угадай фильм\",\n          getState,\n          getRecoveryState\n        });\n      }\n      return createAssistant({ getState, getRecoveryState });\n    };\n\n    assistant = initialize(\n      () => state,\n      () => recoveryState\n    );\n\n    assistant.on(\"start\", () => {\n      console.log(\"start\");\n\n      this.setState({ emojis: \"👶 👶🏻 👶🏼 👶🏽 👶🏾 👶🏿\" });\n      //this.setState({ emojis: \"👶🏿 👶🏾 👶🏽 👶🏼 👶🏻 👶\" });\n\n      // setTimeout(function(){\n      //     this.setState({ classN: \"red\", emojis: \"👨‍🦰 🍩 👩‍🦰 👧 🎷 👦 \" });\n      //  }.bind(this),2000);\n\n      this.setState({\n        commandString: this.state.commandString.concat(\" /// \", \"READY\")\n      });\n    });\n\n    const onDataFn = (command) => {\n      console.log(\"command: \" + JSON.stringify(command));\n      this.setState({\n        commandString: this.state.commandString.concat(\n          \" /// \",\n          JSON.stringify(command)\n        )\n      });\n\n      if (command.smart_app_data && command.smart_app_data.stop_app) {\n        console.log(\"close the app\");\n        assistant.close();\n      }\n\n      if (command.smart_app_data && command.smart_app_data.text) {\n        this.setState({ text: command.smart_app_data.text });\n      }\n\n      if (command.smart_app_data && command.smart_app_data.emojis) {\n        this.setState({ emojis: command.smart_app_data.emojis });\n      }\n\n      if (command.smart_app_data && command.smart_app_data.buttons) {\n        this.setState({ buttons: command.smart_app_data.buttons });\n        // this.textInput.current.focus();\n      }\n\n      if (command.navigation) {\n        switch (command.navigation.command) {\n          case \"UP\":\n            // window.scrollTo(0, 0);\n            break;\n          case \"DOWN\":\n            // window.scrollTo(0, 1000);\n            break;\n          default:\n        }\n      }\n    };\n\n    assistant.on(\"data\", onDataFn);\n    window.onDataFn = onDataFn;\n  }\n\n  render() {\n    function ViewSuggestions(props) {\n      function handleClick(event) {\n        console.log(\"click on\", event);\n        assistant.sendData({ action: { action_id: event } });\n      }\n      var butList = null;\n      if (typeof props.buttons === \"object\") {\n        butList = props.buttons.map((item, index) => (\n          <Button\n            tabindex=\"{index}\"\n            key={index}\n            id={\"button_\" + item.payload}\n            onClick={() => handleClick(item.payload)}\n            text={item.title}\n          />\n        ));\n      }\n      return <div id=\"buttons\">{butList}</div>;\n    }\n\n    return (\n      <DeviceThemeProvider>\n        <GlobalStyle />\n        <svg>\n          <filter id=\"red\">\n            <feColorMatrix type=\"matrix\" values=\"\n              1 0 0 0 0\n              0 0 0 0 0\n              0 0 0 0 0\n              0 0 0 1 0\" />\n          </filter>\n        </svg>\n        <svg>\n          <filter id=\"white\">\n            <feColorMatrix type=\"matrix\" values=\"\n              0 0 0 0 0\n              0 0 0 0 0\n              0 0 0 0 0\n              0 0 0 0 0\" />\n          </filter>\n        </svg>\n        <div>\n          <SwitchTransition>\n            <CSSTransition\n              key={this.state.emojis}\n              addEndListener={(node, done) =>\n                node.addEventListener(\"transitionend\", done, false)\n              }\n              classNames={this.state.classN}\n            >\n              <div className=\"emojis\">\n                <p>{this.state.emojis}</p>\n              </div>\n\n            </CSSTransition>\n          </SwitchTransition>\n        </div>\n        <div className=\"response-text\">\n          <Card>\n              <CardBody>\n                  <CardContent>\n                      {this.state.text}\n                  </CardContent>\n              </CardBody>\n          </Card>\n        </div>\n      </DeviceThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}